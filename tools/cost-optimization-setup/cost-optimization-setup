#!/bin/bash
#
# Copyright 2018 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Script assists with collecting information that can be used to optimize costs.


#### PROMPTS

# Display introduction text.
echo "This script does the following:
- Collects billing, organization, and project details.
- Directs you to a URL to enable billing exports.
- Enables recommender API on all projects linked to the supplied billing account.
- Exports Cloud Asset Inventory information to BigQuery.
- Exports Recommender data to BigQuery.
- Validation throughout.
"

# Override the environment variables with the ones in secrets.sh if it exists for testing purposes.
if [[ -f settings.sh ]]; then
  echo "A setting.sh file was found.  Loading variables from there."
  . ./settings.sh
else
  echo "No 'settings.sh' file detected.  Prompting user."
fi

# Prompt user for information if environment variables not already set.
if [[ -z "${BILLING_ACCOUNT_ID}" ]]; then
  read -p "Billing Account ID: " BILLING_ACCOUNT_ID
fi

if [[ -z "${ORGANIZATION_ID}" ]]; then
  read -p "Organization ID: " ORGANIZATION_ID
fi

if [[ -z "${BIGQUERY_PROJECT_ID}" ]]; then
  read -p "BigQuery Project ID: " BIGQUERY_PROJECT_ID
fi

if [[ -z "${BIGQUERY_DATASET}" ]]; then
  read -p "BigQuery Dataset: " BIGQUERY_DATASET
fi

echo

#### INPUT VALIDATION

# Check to see if the BILLING_ACCOUNT_ID is valid.  If not, list the active billing accounts and exit.
if ! [[ $(gcloud beta billing accounts list --format 'value(name)' --filter "name:${BILLING_ACCOUNT_ID} AND open:true") ]]; then
  echo "The billing account id '${BILLING_ACCOUNT_ID}' either does not exist, is not active, or you do not have access to it. Try one of the following:"
  echo "$(gcloud beta billing accounts list --format 'value(name)' --filter open:true)"
  echo "(end of list)"
  exit 1
fi

# Check to see if the ORGANIZATION_ID is value. If not, list available organizations exit.
# NOTE: The Cloud Asset Inventory API requires one of organization, project, or folder ids in order to function.
if ! [[ $(gcloud organizations list --format 'value(name)' --filter name:organizations/${ORGANIZATION_ID}) ]]; then
  echo "The organization id '${ORGANIZATION_ID}' either does not exist, or you do not have access to it. Try one of the following:"
  echo "$(gcloud organizations list --format 'value(name)')"
  echo "(end of list)"
  exit 1
fi

# Check to see if the BIGQUERY_PROJECT_ID is valid. If not, list available projects and exit.
if ! [[ $(gcloud projects list --format 'value(projectId)' --filter "projectId:${BIGQUERY_PROJECT_ID}") ]]; then
  echo "The BigQuery project id '${BIGQUERY_PROJECT_ID}' either does not exist, or you do not have access to it. Try one of the following:"
  echo "$(gcloud projects list --format 'value(projectId)')"
  echo "(end of list)"
  exit 1
fi

# Check to see if the BIGQUERY_PROJECT_ID has BigQuery API enabled. If not, exit.
if ! [[ $(gcloud services list --project ${BIGQUERY_PROJECT_ID} --filter "state:ENABLED AND name:bigquery.googleapis.com" --format 'value(name)') ]]; then
  echo "The BigQuery project id '${BIGQUERY_PROJECT_ID}' does not have BigQuery APIs enabled."
  exit 1
fi

# TODO (danieldsj) - Check to see if the BIGQUERY_DATASET is valid and exists within the above project.  If not, offer to create one.  If not, exit.


#### ENABLE BILLING EXPORT
echo "Please visit the following link to enable Billing Exports.
When prompted specify '${BIGQUERY_PROJECT_ID}' as the project and '${BIGQUERY_DATASET}' as the dataset:

  https://console.cloud.google.com/billing/${BILLING_ACCOUNT_ID}/export/bigquery/edit?organizationId=${ORGANIZATION_ID}
"
read -p "Press ENTER to continue."
echo


#### ENABLING RECOMMENDER
# We need to iterate over each project linked to the billing account to ensure the recommender API is turned on.
# We need to know what zones the instances are running in, in advance of getting recommendations.
echo "Enabling recommender API on projects linked to billing account id '${BILLING_ACCOUNT_ID}'."

# For each project linked to the supplied billing account.
for PROJECT in $(gcloud beta billing projects list --billing-account ${BILLING_ACCOUNT_ID} --format 'value(projectId)'); do

  # If the compute api is enabled.
  if [[ $(gcloud services list --project ${PROJECT} --filter "state:ENABLED AND name:compute.googleapis.com" --format 'value(name)') ]]; then
    
    # If the recommender api is disabled.
    if [[ $(gcloud services list --project ${PROJECT} --filter "state:DISABLED AND name:recommender.googleapis.com" --format 'value(name)') ]]; then

      # Enable the API
      echo "Enabling recommender for project '${PROJECT}'."
      gcloud services enable recommender.googleapis.com --project='${PROJECT}'
    fi  
  fi
done


#### EXPORT CLOUD ASSET INVENTORY DATA
echo "Exporting Cloud Asset Inventory information into BigQuery"
gcloud asset export \
  --output-bigquery-force \
  --content-type='resource' \
  --organization=${ORGANIZATION_ID} \
  --bigquery-table="projects/${BIGQUERY_PROJECT_ID}/datasets/${BIGQUERY_DATASET}/tables/cloud_asset_inventory"


#### EXPORT RECOMMENDER DATA
echo "resource,description,units,currency_code,duration" > recommendations.csv
for PROJECT in $(gcloud beta billing projects list --billing-account ${BILLING_ACCOUNT_ID} --format 'value(projectId)'); do

  # If the compute api is enabled.
  if [[ $(gcloud services list --project ${PROJECT} --filter "state:ENABLED AND name:compute.googleapis.com" --format 'value(name)') ]]; then
    
    # If the recommender api is enabled.
    if [[ $(gcloud services list --project ${PROJECT} --filter "state:ENABLED AND name:recommender.googleapis.com" --format 'value(name)') ]]; then

      # For each zone.
      for ZONE in $(gcloud compute instances list --quiet --project ${PROJECT} --format='value(zone)' | sort | uniq); do
        
        # Get recommendations
        echo "Getting instance machine type recommendations for project ${PROJECT} and zone ${ZONE}."
        gcloud alpha recommender recommendations list \
          --recommender='google.compute.instance.MachineTypeRecommender' \
          --location="${ZONE}" \
          --project="${PROJECT}" \
          --filter primaryImpact.category:COST \
          --format 'csv[no-heading](content.operationGroups[0].operations.resource,description, primaryImpact.costProjection.cost.units, primaryImpact.costProjection.cost.currencyCode, primaryImpact.costProjection.duration)' \
          >> recommendations.csv

        echo "Getting instance group machine type recommendations for project ${PROJECT} and zone ${ZONE}."
        gcloud alpha recommender recommendations list \
          --recommender='google.compute.instanceGroupManager.MachineTypeRecommender' \
          --location="${ZONE}" \
          --project="${PROJECT}" \
          --filter primaryImpact.category:COST \
          --format 'csv[no-heading](content.operationGroups[0].operations.resource,description, primaryImpact.costProjection.cost.units, primaryImpact.costProjection.cost.currencyCode, primaryImpact.costProjection.duration)' \
          >> recommendations.csv

      done
    fi
  fi
done

# Import the combined recommendatons.csv into BigQuery
echo "Importing combined recommendations into BigQuery."
bq load --autodetect --source_format=CSV ${BIGQUERY_DATASET}.recommendations recommendations.csv


#### VERIFY EXPORT

# Verify whether asset information was exported.
CAI_PRESENT=$(bq ls \
  --project_id ${BIGQUERY_PROJECT_ID} \
  --dataset_id ${BIGQUERY_DATASET} \
  --format csv | cut -d , -f 4 | cut -d '.' -f 2 | tail -n +2 | grep -i "cloud_asset_inventory")

if ! [[ "${CAI_PRESENT}" ]]; then
  echo "Cloud Asset Inventory data was not successfully exported to project '${BIGQUERY_PROJECT_ID}' in dataset '${BIGQUERY_DATASET}'." 
else
  echo "Cloud Asset Inventory data was successfully exported."
fi

# Verify whether billing information was exported.
BILLING_EXPORT_TABLE_NAME=$(echo "gcp_billing_export_v1_${BILLING_ACCOUNT_ID}" | sed 's/-/_/g')
BILLING_EXPORT_PRESENT=$(bq ls \
  --project_id ${BIGQUERY_PROJECT_ID} \
  --dataset_id ${BIGQUERY_DATASET} \
  --format csv | cut -d , -f 4 | cut -d '.' -f 2 | tail -n +2 | grep -i "${BILLING_EXPORT_TABLE_NAME}") 

if ! [[ "${BILLING_EXPORT_PRESENT}" ]]; then
  echo "Billing export data was not successfully exported to project '${BIGQUERY_PROJECT_ID}' in dataset '${BIGQUERY_DATASET}'." 
else
  echo "Billing export data was successfully exported."
fi

# Verify whether recommnder information was exported.
RECOMMENDATIONS_PRESENT=$(bq ls \
  --project_id ${BIGQUERY_PROJECT_ID} \
  --dataset_id ${BIGQUERY_DATASET} \
 --format csv | cut -d , -f 4 | cut -d '.' -f 2 | tail -n +2 | grep -i "recommendations")

if ! [[ "${RECOMMENDATIONS_PRESENT}" ]]; then
  echo "Recommendations was not successfully exported to project '${BIGQUERY_PROJECT_ID}' in dataset '${BIGQUERY_DATASET}'." 
else
  echo "Recommendations data was successfully exported."
fi


